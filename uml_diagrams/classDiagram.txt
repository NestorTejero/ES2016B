@startuml

package Model {

interface CanUpgrade {
    +Upgrade() : void
    +IsUpgradeable(int numCoins) : bool
}
interface CanReceiveDamage {
    +ReceiveDamage(Projectile proj) : void
}

class GameController << (S,#FF7700) Singleton >>{
    +{static} instance : GameController
    +totalWaves : int
    -currentWave : int
    -minSoundVolume : float
    -maxSoundVolume : float
    -currentSoundVolume : float
    +notifyDeath(CanReceiveDamage dead) : void
    +notifyWaveClear(AI ai) : void
}

GameController "1" -- "2" Player

class Player {
    -numCoins : int
    +getMoney(Unit deadUnit) : void
}

abstract class AI extends Player{
    +{abstract}Play() : void
    +timeToUpgrade() : void
}

class EasyAI extends AI {
}
class MediumAI extends AI {
}
class HardAI extends AI {
}

class UnitShop {
    +respawns : Transform[]
    +units : List<GameObject>
    +GetAvailable() : List<Unit>
    +IsPurchasable(Unit toPurchase, int numCoins) : bool
    +GetPurchasable(int numCoins) : List<Unit>
    +Purchase(Unit toPurchase) : void
}

Unit "*" -- "1" UnitShop : sells

AI "*"--"1" UnitShop : buys from

class Unit implements CanReceiveDamage{
    +baseHealth : float
    -totalHealth : float
    -currentHealth : float
    +moveSpeed : float
    +purchaseCost : int
    +rewardCoins : int
}

GameController "1" -- "*" Unit : notifies

class Weapon {
    +baseDamage : float
    +baseRange : float
    +baseAttackSpeed : float
    -currentDamage : float
    -currentRange : float
    -currentAttackSpeed : float
    -upgradeFactor : float
    +Attack() : void
}

class Projectile {
    -projectileSpeed : float
    -damage : float
    -target : CanReceiveDamage
    +Properties(projSpeed, target, damage)
    +Shoot() : bool
    +getDamage() : float
}

Weapon "1" -- "*" Projectile : creates

Unit "1" -- "1" Weapon
Tower "1" -- "1" Weapon

class Building implements CanUpgrade, CanReceiveDamage {
    -currentLevel : int
    +baseHealth : float
    -totalHealth : float
    -currentHealth : float
    +upgradeFactor : float
    +upgradeCost : int
    +repairQuantity : float
    +repairCost : int
    +IsRepairable(int numCoins) : bool
    +Repair() : void
}

GameController "1" -- "1" Building : notifies

class Tower implements CanUpgrade {
    -currentLevel : int
    +upgradeCost : int
}

class APIHUD << (S,#FF7700) Singleton >>{
    +{static} instance : APIHUD
    -selectedItem : bool
}

}
@enduml