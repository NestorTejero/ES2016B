@startuml

interface CanUpgrade {
    +Upgrade() : void
}
interface CanReceiveDamage {
    +ReceiveDamage(Projectile proj) : void
}
interface CanRepair {
    +Repair() : void
}

class GameController << (S,#FF7700) Singleton >>{
    +{static} instance : GameController
    +totalWaves : int
    -currentWave : int
    -minSoundVolume : float
    -maxSoundVolume : float
    -currentSoundVolume : float
    +notifyDeath(CanReceiveDamage dead) : void
}

class Player {
    +getMoney(Unit deadUnit) : void
}

GameController "1" -- "2" Player

abstract class PlayerLogic {
    -numCoins : int
    +Play() : void
}

class HumanAI extends PlayerLogic {
}
class EasyAI extends PlayerLogic {
}
class MediumAI extends PlayerLogic {
}
class HardAI extends PlayerLogic {
}

Player "1" -- "1" PlayerLogic

class Shop << (S,#FF7700) Singleton >> {
    --UNIT--
    +getAvailableUnits() : List<Unit>
    +isUnitPurchasable(Unit unitToPurchase, int numCoins) : bool
    +getPurchasableUnits(int numCoins) : List<Unit>
    +purchaseUnit(Unit unitToPurchase) : void
    --TOWER--
    +getAvailableTowers() : List<Tower>
    +isTowerUpgradeable(Tower tower, int numCoins) : bool
    +getUpgradeableTowers(int numCoins) : List<Tower>
    +purchaseTowerUpgrade(Tower tower) : void
    --BUILDING--
    +isBuildingRepairable(int numCoins) : bool
    +purchaseBuildingRepair() : void
}

PlayerLogic "*"--"1" Shop : buys from

class Unit implements CanReceiveDamage{
    +baseHealth : float
    -totalHealth : float
    -currentHealth : float
    +moveSpeed : float
    +costCoins : int
    +rewardCoins : int
}

GameController "1" -- "*" Unit : notifies

class Weapon implements CanUpgrade{
    +baseDamage : float
    +baseRange : float
    +baseAttackSpeed : float
    -currentDamage : float
    -currentRange : float
    -currentAttackSpeed : float
    -upgradeFactor : float
    +Attack() : void
}

class Projectile {
    -projectileSpeed : float
    -damage : float
    -target : CanReceiveDamage
}

Weapon "1" -- "*" Projectile : creates

Unit "1" -- "1" Weapon
Tower "1" -- "1" Weapon

class Building implements CanUpgrade, CanReceiveDamage, CanRepair {
    -currentLevel : int
    +baseHealth : float
    -totalHealth : float
    -currentHealth : float
    +upgradeFactor : float
    +upgradeCost : int
    +repairQuantity : float
    +repairCost : int
    +getMissingHealth() : float
}

GameController "1" -- "1" Building : notifies

class Tower implements CanUpgrade {
    -currentLevel : int
    +upgradeCost : int
}

@enduml
